import pefile,re,cpp_demangle

# Decode the mangled cpp function names
def decode_mangled_cpp(to_decode):
    to_decode_str = to_decode.decode('utf-8')
    print(to_decode_str)
    decoded_symbol = cpp_demangle.demangled(to_decode_str)
    print(type(decoded_symbol))
    return decoded_symbol
    
# Check for mangled C++ names
def is_mangled_cpp_name(function_name):
    function_name_str = function_name.decode('utf-8')
    return any(char in function_name_str for char in ['?', '$', '@'])

# Extract imported functions that the exe uses including cpp functions and the DLLs he uses
def imported_functions_and_DLLs(pe_file_path):
    pe = pefile.PE(pe_file_path)
    pe.parse_data_directories()
    dll_imported = list()
    imported_functions = list()
    cpp_mangle_imports = list()
    # Iterate through imported DLLs
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        dll_name = entry.dll.decode("utf-8")
        #if dll_name not in dll_imported:
        dll_imported.append(dll_name)
        for imp in entry.imports:
            name = imp.name
            if is_mangled_cpp_name(imp.name) == False:
                name = imp.name.decode("utf-8")
                imported_functions.append(name)
            else:
                name = imp.name.decode("utf-8")
                cpp_mangle_imports.append(name)   

    return dll_imported,imported_functions,cpp_mangle_imports

# Extract PE files 9 fields of 10 sections like in the database 
def PE_sections_exctractions(pe_file_path):
    pe = pefile.PE(pe_file_path)
    checked_sections =  (".text",".data",".rdata",".bss",".idata",".edata",".rsrc",".reloc",".tls",".pdata")
    pe_sections = dict()
    
    # Set default value -1 to every field in the sections (so if doesn't exists you can know)
    for sections in checked_sections:
        pe_sections[sections.strip(".")] = {"Misc_VirtualSize":-1,"VirtualAddress":-1,
                                                "SizeOfRawData":-1,"PointerToRawData":-1,
                                                "PointerToRelocations":-1,"PointerToLinenumbers":-1,
                                                "NumberOfRelocations":-1,"NumberOfLinenumbers":-1,
                                                "Characteristics":-1}
    for section in pe.sections:
        section_name = str(section.Name.decode("utf-8")).replace('\x00', '').strip()
        for checked in checked_sections:
            if checked == section_name:
                pe_sections[section_name.strip(".")]["Misc_VirtualSize"] = section.Misc_VirtualSize
                pe_sections[section_name.strip(".")]["VirtualAddress"] = section.VirtualAddress
                pe_sections[section_name.strip(".")]["SizeOfRawData"] = section.SizeOfRawData
                pe_sections[section_name.strip(".")]["PointerToRawData"] = section.PointerToRawData
                pe_sections[section_name.strip(".")]["PointerToRelocations"] = section.PointerToRelocations
                pe_sections[section_name.strip(".")]["PointerToLinenumbers"] = section.PointerToLinenumbers
                pe_sections[section_name.strip(".")]["NumberOfRelocations"] = section.NumberOfRelocations
                pe_sections[section_name.strip(".")]["NumberOfLinenumbers"] = section.NumberOfLinenumbers
                pe_sections[section_name.strip(".")]["Characteristics"] = section.Characteristics
        
    return pe_sections    