# Using Isolation Forest Model
from sklearn.ensemble import IsolationForest
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.utils import resample
import pandas as pd
import os
import numpy as np
from PE_Classification import *

def multi_class_predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv')

    # Features
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    normal_file_data = data[data['Type'] == 0][features]
    y = data['Type']
    
    # for each type of malware and a normal file
    models = {}
    for type_value in range(7):
        x = data[data['Type'] == type_value][features]
        isolation_forest = IsolationForest(contamination='auto', random_state=42)
        isolation_forest.fit(x)

        models[type_value] = isolation_forest
    
    x = data[features]
    anomaly_scores = np.zeros((len(x), len(models)))
    
    # new data from exe
    exe_features = get_exe_data(exe_path)[0]
    exe_features_array = np.array(list(exe_features.values()))
    feature_names = list(exe_features.keys())

    exe_features_array  = exe_features_array .reshape(1, -1)

    new_exe_df = pd.DataFrame(exe_features_array, columns=feature_names)
    # anomaly_score = isolation_forest.decision_function(new_exe_df)

    for class_label, model in models.items():
        anomaly_scores[:, class_label] = model.decision_function(new_exe_df)
    
    print(anomaly_scores)

    threshold = 0.5  
    predicted_labels = np.argmax(anomaly_scores < threshold, axis=1)
    
    print("Predicted label:", predicted_labels[0])
    print(predicted_labels)


def one_class_predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv')

    # Features
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    x = data[features]

    # Predict
    y = data['Type']             


    isolation_forest = IsolationForest(contamination='auto', random_state=42)
    isolation_forest.fit(x)

    # DLLs exe features 
    exe_features = get_exe_data(exe_path)[0]
    exe_features_array = np.array(list(exe_features.values()))
    feature_names = list(exe_features.keys())

    exe_features_array  = exe_features_array .reshape(1, -1)

    new_exe_df = pd.DataFrame(exe_features_array, columns=feature_names)
    anomaly_score = isolation_forest.decision_function(new_exe_df)

    threshold = -0.5

    prediction = (anomaly_score < threshold).astype(int)

    print("Prediction:", prediction)
    
    return prediction


if __name__ == "__main__":
    # get file path and set base
    pe_file_path = "C:\\WinRAR.exe"
    #pe_file_path = "C:\\Users\\USER\\Documents\\Audacity\\audacity.exe"
    name = "audacity.exe"

    multi_class_predict_exe(pe_file_path)