# Using RandomForestClassifier
from sklearn.ensemble import IsolationForest,RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.utils import resample
import pandas as pd
import os
import numpy as np
from PE_Classification import *

def test_type2():
    data = pd.read_csv('test2.csv')
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    test = data[features]

    return test

def test_type3():
    data = pd.read_csv('test3.csv')
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    test = data[features]

    return test

def new_exe_data(exe_path):
    exe_features =  get_exe_data(exe_path)
    exe_dfs = list()
    new_exe_df = pd.DataFrame()

    # convert all exe data to dataframe   
    row_df = pd.DataFrame([exe_features]) 
    exe_dfs.append(row_df)
    new_exe_df = pd.concat(exe_dfs, ignore_index=True)

    return new_exe_df

def multi_class_predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv') #dll_data
    headers_data = pd.read_csv('PE_Header.csv')
    sections_data = pd.read_csv('PE_Section.csv')
    #function_chunk = data = pd.read_csv("API_Functions.csv", nrows=100)
    
   
    # Features
    x = data.drop(columns=["SHA256","Type"])
    y = data['Type']
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    # for each type of malware and a normal file
    rf_classifier = RandomForestClassifier()
    rf_classifier.fit(X_train, y_train)
    
    y_pred = rf_classifier.predict(X_test)
    #print(classification_report(y_test, y_pred))
        
    #new_exe_df = test_type2()
    
    #new_exe_df = test_type3()
    
    # get dataframe of the exe data
    exe_dataframe = new_exe_data(exe_path)
    
    # for testing only
    # exe_dataframe.to_csv("file_name.csv", index=False)
    
    predicted_type = rf_classifier.predict(exe_dataframe)
    print("the file is likely type: " , predicted_type)
    

if __name__ == "__main__":
    # get file path and set base
    pe_file_path = "assistant.exe"
    #pe_file_path = "C:\\Users\\USER\\Documents\\Audacity\\audacity.exe"
    #name = "audacity.exe"

    multi_class_predict_exe(pe_file_path)