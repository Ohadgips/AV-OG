# Using Isolation Forest Model RandomForestClassifier
from sklearn.ensemble import IsolationForest,RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.utils import resample
import pandas as pd
import os
import numpy as np
from PE_Classification import *

def test_type2():
    data = pd.read_csv('test2.csv')
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    test = data[features]

    print(type(test))

    return test



def multi_class_predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv')

    # Features
    x = data.drop(columns=["SHA256","Type"])
    y = data['Type']
    
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

    # for each type of malware and a normal file
        
    rf_classifier = RandomForestClassifier()
    rf_classifier.fit(X_train, y_train)
    
    y_pred = rf_classifier.predict(X_test)
    print(classification_report(y_test, y_pred))
    # new data from exe
    exe_features =  get_exe_data(exe_path)[0]
    exe_features_array = np.array(list(exe_features.values()))
    feature_names = list(exe_features.keys())

    exe_features_array  = exe_features_array .reshape(1, -1)
    

    new_exe_df = pd.DataFrame(exe_features_array, columns=feature_names)
    
    #new_exe_df = test_type2()
    predicted_type = rf_classifier.predict(new_exe_df)
    print("the file is likely type: " , predicted_type)
    


def one_class_predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv')

    # Features
    excluded_columns = ["SHA256","Type"]
    features = [col for col in data.columns if col not in excluded_columns]
    x = data[features]

    # Predict
    y = data['Type']             


    isolation_forest = IsolationForest(contamination='auto', random_state=42)
    isolation_forest.fit(x)

    # DLLs exe features 
    exe_features = get_exe_data(exe_path)[0]
    exe_features_array = np.array(list(exe_features.values()))
    feature_names = list(exe_features.keys())

    exe_features_array  = exe_features_array .reshape(1, -1)

    new_exe_df = pd.DataFrame(exe_features_array, columns=feature_names)
    anomaly_score = isolation_forest.decision_function(new_exe_df)

    threshold = -0.5

    prediction = (anomaly_score < threshold).astype(int)

    print("Prediction:", prediction)
    
    return prediction


if __name__ == "__main__":
    # get file path and set base
    pe_file_path = "C:\\WinRAR.exe"
    #pe_file_path = "C:\\Users\\USER\\Documents\\Audacity\\audacity.exe"
    name = "audacity.exe"

    multi_class_predict_exe(pe_file_path)