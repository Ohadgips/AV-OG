# Using RandomForestClassifier
from sklearn.ensemble import IsolationForest,RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,classification_report
from sklearn.utils import resample
import pandas as pd
import os
import numpy as np
from PE_Classification import *

def test_type2():
    dll_data = pd.read_csv('test2.csv')
    print(dll_data,type(dll_data))
    dll_data.drop(columns=["SHA256","Type"])

    headers_data = pd.read_csv('headers_test2.csv')
    headers_data.drop(columns=["SHA256","Type"])
    print(headers_data,type(headers_data))

    sections_data = pd.read_csv('sections_test2.csv')
    sections_data.drop(columns=["SHA256","Type"])
    print(sections_data,type(sections_data))

    return (dll_data,headers_data,sections_data)


def new_exe_data(exe_path):
    exe_features =  get_exe_data(exe_path)
    exe_dfs = list()
    new_exe_df = pd.DataFrame()

    # convert all exe data to dataframe   
    row_df = pd.DataFrame([exe_features]) 
    exe_dfs.append(row_df)
    new_exe_df = pd.concat(exe_dfs, ignore_index=True)

    return new_exe_df


def predict_exe(exe_path):
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    data = pd.read_csv('DLLs_Imported.csv') #dll_data
    headers_data = pd.read_csv('PE_Header.csv').drop(columns=["SHA256","Type"])
    sections_data = pd.read_csv('PE_Section.csv').drop(columns=["SHA256","Type"])
    #functions_data = pd.read_csv("API_Functions.csv").drop(columns=["SHA256","Type"])    
    # Features
    y = data['Type']
    x = pd.concat([data.drop(columns=["SHA256","Type"]),headers_data,sections_data], axis=1)
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
    x.to_csv("test.csv", index=False)
    # for each type of malware and a normal file
    rf_classifier = RandomForestClassifier()
    rf_classifier.fit(X_train, y_train)
    
    y_pred = rf_classifier.predict(X_test)
        
    #new_exe_df = test_type2()
    
    #new_exe_df = test_type3()
    
    # get dataframe of the exe data
    exe_dataframe = new_exe_data(exe_path)
    
    # for testing only
    # exe_dataframe.to_csv("file_name.csv", index=False)
    
    predicted_type = rf_classifier.predict(exe_dataframe)
    print("the file is likely type: " , predicted_type)

def lst_new_exe_data(exe_path):
    exe_features =  get_exe_data(exe_path)
    exe_dfs = []
    new_exe_df = pd.DataFrame()

    # convert all exe data to dataframe
    for feature in exe_features:
        row_df = pd.DataFrame(feature, index=[0]) 
        exe_dfs.append(row_df)
    return tuple(exe_dfs)

def features_dataframes():
    data = pd.read_csv('DLLs_Imported.csv') #dll_data
    headers_data = pd.read_csv('PE_Header.csv')
    sections_data = pd.read_csv('PE_Section.csv')

    return (data,headers_data,sections_data)


def multi_models_predict_exe(exe_path):
    
    # Get data from dataset
    os.chdir("../Windows Malware Detection")
    os.chdir("Datasets")
    #exe_dataframe = lst_new_exe_data(exe_path)
    dataframes = features_dataframes()
    exe_dataframe = test_type2()
    
    #exe_dataframe = test_type3()
    models = []
    predictions = []
    
    # Features
    for index, data in enumerate(dataframes):
        y = data['Type']
        x = data.drop(columns=["SHA256","Type"])
        
        # get rid of non existing columns in new exe from dataframe
        valid_features = x.columns.intersection(exe_dataframe[index].columns)
        filtered_x = x[valid_features]

        X_train, X_test, y_train, y_test = train_test_split(filtered_x, y, test_size=0.2, random_state=42)
        
        # for each type of malware and a normal file
        rf_classifier = RandomForestClassifier()
        rf_classifier.fit(X_train, y_train)
        
        print(exe_dataframe[index])
        valid_features_for_pred = filtered_x.columns.tolist()
        features_for_prediction = exe_dataframe[index][valid_features_for_pred]
        predicted_type = rf_classifier.predict(features_for_prediction)
        
        models.append(rf_classifier)
        predictions.append(predicted_type)
        print("the file may be type: " , predicted_type)



    
    # get dataframe of the exe data
    final_predictions = pd.DataFrame(predictions).mode(axis=0).squeeze()
    print("the file is likely type: " , final_predictions)
    
    
if __name__ == "__main__":
    # get file path and set base
    pe_file_path = "assistant.exe"
    #pe_file_path = "C:\\Users\\USER\\Documents\\Audacity\\audacity.exe"
    #name = "audacity.exe"

    multi_models_predict_exe(pe_file_path)