import csv,os
from PE_Extraction import *

# Extract list of the data checked in the dataset
def data_from_datasets():
    # API_Functions
    with open('API_Functions.csv') as csvFile:
        reader = csv.reader(csvFile,dialect='excel')
        functions_list = next(reader)
        functions_list = list(functions_list)
        del functions_list[0:2]
    
    # DLLs_Imported
    with open('DLLs_Imported.csv') as csvFile:
        reader = csv.reader(csvFile,dialect='excel')
        dlls_list = next(reader)
        dlls_list = list(dlls_list)
        del dlls_list[0:2]
    
    return functions_list,dlls_list

# compare the data and creating a dict of the function name and 0 or 1 if the function is used like in the dataset  
def compare_functions(pe_functions,imported_functions):
    pe_functions_lower = [pefunction.casefold() for pefunction in pe_functions]
    exe_functions = dict()
    for function in imported_functions:
        if function.casefold() in pe_functions_lower:
            exe_functions[function] = 1
        else:
            exe_functions[function] = 0
    
    return exe_functions
# compare the data and creating a dict of the dlls and 0 or 1 if the dlls is used
def compare_DLLs(pe_dlls,imported_dlls):
    pe_dlls_lower = [pedll.casefold() for pedll in pe_dlls]
    exe_dlls = dict()
    for dll in imported_dlls:
        if dll.casefold() in pe_dlls_lower:
            exe_dlls[dll] = 1
        else:
            exe_dlls[dll] = 0
    
    return exe_dlls


def get_exe_data(pe_file_path):
    all_exe_data = []
    # get data from about the new exe and from the dataset:
    
    # get imported dlls and functions that the exe uses
    pe_dll_imported,pe_functions,mangled_imports = imported_functions_and_DLLs(pe_file_path)

    # get PE headers tuple with 3 dict that contains all the headers value
    pe_headers = PE_headers(pe_file_path)

    # get PE sections's fields values
    pe_sections = PE_sections(pe_file_path)
    
    # get data from dataset
    imported_functions,dlls_data = data_from_datasets()
    
    # in list 0 - dlls, 1 - functions, 2 - headers, 3 - sections 
    all_exe_data.append(compare_DLLs(pe_dll_imported,dlls_data))
    all_exe_data.append(pe_headers)
    all_exe_data.append(pe_sections)
    #all_exe_data.update(compare_functions(pe_functions,imported_functions))
    return tuple(all_exe_data)
