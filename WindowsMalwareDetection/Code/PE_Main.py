import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import winreg
import threading
import os
def get_downloads_dir():
    downloads_dir = None
    try:
        # Open the Registry key where the Downloads directory is stored
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER,
                            r"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders") as key:
            # Try to retrieve the Downloads directory value from the Registry
            downloads_dir = winreg.QueryValueEx(key, "{374DE290-123F-4565-9164-39C4925E467B}")[0]
    except Exception as e:
        print(f"Error occurred while accessing the Registry: {e}")
    
    return downloads_dir

class FileCreatedHandler(FileSystemEventHandler):
    def __init__(self):
        self.all_files = []  
        self.exe_files = [] 
    def on_created(self, event):
        if event.is_directory:
            return
        # Get the full path of the created file
        created_file_path = event.src_path
        self.all_files.append(created_file_path)
        
        if created_file_path.lower().endswith(".exe"):
            self.exe_files.append(created_file_path)

def monitor_directory(path):
    event_handler = FileCreatedHandler()
    observer = Observer()
    observer.schedule(event_handler, path, recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        return event_handler.all_files, event_handler.exe_files
    observer.join()

# Example usage: Monitor the Downloads directory
if __name__ == "__main__":
    downloads_path = get_downloads_dir()
    if downloads_path and os.path.isdir(downloads_path):
        files,exes = monitor_directory(downloads_path)
        for file_path in files:
            print(file_path)
        print("\nExecutable files (.exe):")
        for exe_path in exes:
            print(exe_path)
    else:
        print("Downloads directory not found or inaccessible.")
