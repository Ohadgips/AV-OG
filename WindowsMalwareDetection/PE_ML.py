from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
from WindowsMalwareDetection.PE_Classification import *
from collections import Counter

def lst_new_exe_data(exe_path):
    exe_features =  get_exe_data(exe_path)
    exe_dfs = []
    new_exe_df = pd.DataFrame()

    # convert all exe data to dataframe
    for feature in exe_features:
        row_df = pd.DataFrame(feature, index=[0]) 
        exe_dfs.append(row_df)
    return tuple(exe_dfs)

def test_data(testtype):
    print("It's A Test Now ")
    dll_test = pd.read_csv('Data/Tests/DLLs_Tests.csv') #dll_data
    headers_test = pd.read_csv('Data/Tests/Header_Tests.csv')
    sections_test = pd.read_csv('Data/Tests/Sections_Tests.csv')
    functions_tests = pd.read_csv("Data/Tests/Functions_Tests.csv")

    dll_test = dll_test[dll_test['Tests'] == testtype]
    headers_test = headers_test[headers_test['Tests'] == testtype]
    sections_test = sections_test[sections_test['Tests'] == testtype]
    functions_tests = functions_tests[functions_tests['Tests'] == testtype]
    
    return (dll_test,headers_test,sections_test,functions_tests)

def features_dataframes():
    data = pd.read_csv('Data/DLLs_Imported.csv') #dll_data
    headers_data = pd.read_csv('Data/PE_Header.csv')
    sections_data = pd.read_csv('Data/PE_Section.csv')
    # the file was created after filtering the feartures with PE_Features_Filtering.py
    functions_data = pd.read_csv("Data/Filtered_API_Functions.csv")    

    return (data,headers_data,sections_data,functions_data)


def multi_models_predict_exe(exe_path):
    
    # Get data from dataset
    print(exe_path)
    if "NotASpy.exe" in exe_path:
        exe_dataframe = test_data(6)
    elif "NotBankTrojan.exe" in exe_path:
        exe_dataframe = test_data(4)
    elif "NotDownloader.exe" in exe_path:
        exe_dataframe = test_data(2)
    else:    
        exe_dataframe = lst_new_exe_data(exe_path)
    dataframes = features_dataframes()
    
    models = []
    predictions = []
    
    # Features
    for index, data in enumerate(dataframes):
        y = data['Type']
        x = data.drop(columns=["SHA256","Type"])
        
        # get rid of non existing columns in new exe from dataframe
        valid_features = x.columns.intersection(exe_dataframe[index].columns)
        filtered_x = x[valid_features]

        X_train, X_test, y_train, y_test = train_test_split(filtered_x, y, test_size=0.2, random_state=42)
        
        # for each type of malware and a normal file
        rf_classifier = RandomForestClassifier()
        rf_classifier.fit(X_train, y_train)
        
        print("Prediction Index: ",index)
        valid_features_for_pred = filtered_x.columns.tolist()
        features_for_prediction = exe_dataframe[index][valid_features_for_pred]
        predicted_type = rf_classifier.predict(features_for_prediction)
        
        models.extend(rf_classifier)
        predictions.extend(predicted_type)
        print("the file may be type: " , predicted_type)

    prediction_counter = Counter(predictions)
    if 0 in predictions and prediction_counter.most_common(1)[0][1] < 3:
        final_prediction = 0
    else:
        final_prediction = prediction_counter.most_common(1)[0][0]
    # get dataframe of the exe data
    #final_predictions = pd.DataFrame(predictions).mode(axis=0).squeeze()
    print ("Final Prediction: ",final_prediction)
    return exe_path,final_prediction
    
    
